#!/bin/bash

# example: connect to domserver on cup on port 12345 from home via lilo8 jumphost
#   sshtunnel 12345 lilo8.science.ru.nl cup.cs.ru.nl 12345
#   sshtunnel 80 lilo.science.ru.nl cup.cs.ru.nl 12345
#   sshtunnel 12345  lilo7.science.ru.nl lilo8.science.ru.nl cup.cs.ru.nl 12345

readonly USAGE="USAGE 
  sshtunnel [-f] LOCALPORT  [SSHHOST_1 ... SSHHOST_N-1] SSHHOST_N [REMOTEPORT]       

WHERE
  Each SSHHOST_X can be specified as: [USER_X@]SSHSERVER_X[:SSHPORT_X]
  If REMOTEPORT is not given, then REMOTEPORT=LOCALPORT.
  The option -f runs the ssh command in the background.

  For more information run: sshtunnel -h"

readonly HELP="
NAME
  sshtunnel - create an end-to-end encrypted SSH tunnel from a local port on localhost to a local port on a SSH server
 
$USAGE
 
DESCRIPTION
  Sshtunnel creates an end-to-end encrypted SSH tunnel from localhost to a remote SSH server.
  The SSH tunnel forwards traffic coming into the local port LOCALPORT on localhost, safely encrypted, 
  to a port REMOTEPORT on the localhost interface on the remote SSH server SSHHOST_N.
  We can have an additional SSH host(s) to also bridge traffic over firewall(s).
  
  The encrypted SSH-tunnel is created to SSHHOST_1, which extends the SSHtunnel to SSHHOST_2, ... to SSHHOST_N.
  From the last SSHHOST_N all traffic is forwarded locally to localhost:REMOTEPORT.
  That is on the last SSHHOST_N all traffic is sent to port REMOTEPORT on the internal localhost interface. 
  An end-to-end encrypted SSH-tunnel is made to the remote service running on internal port REMOTEPORT on SSHHOST_N.
  
  It executes the following ssh command:
  
       ssh [-f] -N -T [-J  SSHHOST_1,SSHHOST_2,...,SSHHOST_N-1]  -L LOCALPORT:localhost:REMOTEPORT SSHHOST_N         
  
  So the destination machine SSHHOST_N must run a SSH server so that you can make an end-to-end encrypted tunnel.
  For the service running on the internal port REMOTEPORT on SSHHOST_N the connection is coming from the localhost interface,
  which allows us to connect to services which are not open to the outside world!
  
EXAMPLE 
  Tunneling VNC traffic to an VNC server behind a firewall with
  the help of ssh server open to the outside world 'eg. lilo.science.ru.nl' 
  where the VNCSERVER itself also runs a SSH server so we can
  send all VNC message safely over an end-to-end encrypted tunnel.
  Note that the VNC protocol does not encrypt its traffic so we must supply
  an end-to-end encrypted tunnel for it to prevent eavesdropping.

    # make an encrypted ssh tunnel to VNCSERVER to prevent eavesdropping    
    sshtunnel 5900 VNCSERVER 
    # executes: ssh -N -L 5900:localhost:5900 VNCSERVER 
    
    # also bridge the tunnel over a firewall using lilo.science.ru.nl      
    sshtunnel 5900  lilo.science.ru.nl VNCSERVER 
    # executes: ssh -N -J lilo.science.ru.nl -L 5900:localhost:5900 VNCSERVER 
    
    # use locally another port if the local machine itself is running a VNC server
    sshtunnel 15900  lilo.science.ru.nl VNCSERVER 5900
    # executes: ssh -N -J lilo.science.ru.nl -L 15900:localhost:5900 VNCSERVER  
"

sshtunnel() {
    if [[ "$1" == "-h" ]]; then
        echo "$HELP"
        exit 0
    fi

    BACKGROUND_OPTION=""
    if [[ "$1" == "-f" ]]; then
        shift
        BACKGROUND_OPTION="-f"
    fi

    # check minimal number of arguments are provided (LOCALPORT  and SSHHOST_N)
    if [[ "$#" -lt "2" ]]; then
        echo "$USAGE"
        exit 0
    fi

    # check LOCALPORT
    readonly LOCALPORT="$1"
    shift
    if ! [[ $LOCALPORT =~ ^-?[0-9]+$ ]]; then
        echo "ERROR: first argument must be a TCP port"
        echo "$USAGE"
        exit 0
    fi

    # remaining args :  [SSHHOST_1 ... SSHHOST_N-1] SSHHOST_N [REMOTEPORT]
    # we have optionally as last argument  a REMOTEPORT
    readonly LAST_ARG="${@: -1}"
    if [[ $LAST_ARG =~ ^-?[0-9]+$ ]]; then
        readonly REMOTEPORT=$LAST_ARG
        # pop: remove last arg from $@
        set -- "${@:1:$#-1}"
    else
        readonly REMOTEPORT=$LOCALPORT
    fi

    # remaining args are SSH Hosts: [SSHHOST_1 ... SSHHOST_N-1] SSHHOST_N
    SSHHOSTS=("$@")
    if ! [[ "${#SSHHOSTS[@]}" -ge "1" ]]; then
        echo "$USAGE"
        exit 0
    fi

    # get last SSHHOST out of list as final SSH server
    LAST_SSHHOST=${SSHHOSTS[${#SSHHOSTS[@]} - 1]}
    unset "SSHHOSTS[${#SSHHOSTS[@]}-1]"

    # remaining SSHHOSTS used as JUMP SSH SERVERS
    JUMPHOSTS_OPTION=""
    if [[ "${#SSHHOSTS[@]}" -ge "1" ]]; then
        JUMPHOSTS_OPTION="-J "
        SEP=""
        for SSHHOST in "${SSHHOSTS[@]}"; do
            JUMPHOSTS_OPTION="$JUMPHOSTS_OPTION$SEP$SSHHOST"
            SEP=","
        done
    fi

    # ssh [-f] -N -T [-J SSHHOST_1,SSHHOST_2,...,SSHHOST_N-1] -L LOCALPORT:localhost:REMOTEPORT SSHHOST_N
    echo "executing: ssh $BACKGROUND_OPTION  -N -T $JUMPHOSTS_OPTION -L $LOCALPORT:localhost:$REMOTEPORT $LAST_SSHHOST"
    # run ssh in background so that signals send to sshtunnel script are handled directly
    # note: we run ssh process in background and make shell wait for it so that this script directly can
    #       handle its signals. If we would run ssh in foreground then signals would be on hold by bash
    #       until foreground process in bash is finished.  Bash will defer handling signals sent to itself
    #       while it's waiting for a foreground child process.
    ssh $BACKGROUND_OPTION -N -T $JUMPHOSTS_OPTION -L $LOCALPORT:localhost:$REMOTEPORT $LAST_SSHHOST &
    SSH_PID=$!
    wait "$SSH_PID"
}

# Define a single cleanup handler function
# Function to handle termination signals and kill the child process
# IMPORTANT:
#   Key takeaway for trap and foreground children:
#    - When a Bash script is waiting for a foreground child, signals sent to the parent script
#      can be deferred until the child terminates or relinquishes the foreground.
#    - Ctrl-C (SIGINT) is special because it's sent to the entire foreground process group,
#      so the child also receives it, often terminating quickly, allowing the parent's trap to fire.
#    - To ensure your traps on the parent script respond immediately to kill commands, you typically
#      need to run the long-running child process in the background and use wait.
cleanup_handler() {
    local signal_name="$1" # The first argument will be the signal name
    printf "\n\nsshtunnel: cleanup handler called for PID: $$ due to signal: $signal_name\n"
    printf "sshtunnel: Terminating sshbridge script, killing ssh child process...\n"
    # Kill all child processes started by this script
    pkill -P $$
    exit 0 # Exit after cleanup
}

# Trap termination signals, passing the signal name to the handler
trap 'cleanup_handler SIGHUP' SIGHUP
trap 'cleanup_handler SIGINT' SIGINT
trap 'cleanup_handler SIGTERM' SIGTERM

sshtunnel "$@"
